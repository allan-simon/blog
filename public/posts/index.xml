<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Allan&#39;s blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://allan-simon.github.io/blog/posts/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 23 Feb 2015 17:11:21 CST</updated>
    
    <item>
      <title>form name goes into global scope javascript</title>
      <link>http://allan-simon.github.io/blog/posts/form-name-goes-into-global-scope-javascript/</link>
      <pubDate>Mon, 23 Feb 2015 17:11:21 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/form-name-goes-into-global-scope-javascript/</guid>
      <description>

&lt;p&gt;An interesting problem a friend of mine discovered today&lt;/p&gt;

&lt;p&gt;Can you spot the problem?&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Le javascript&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var CreateVersion = (function(){
    &#39;use strict&#39;;

    var foo = function(text) {
        console.log(text);
    };

    return {
        foo : foo 
    };
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Le HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;CreateVersion&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;lt;span&amp;gt;something&amp;lt;/span&amp;gt;
            &amp;lt;!--
                onClick on a span is a bad pratice and will be
                the object of an other post
            --&amp;gt;
            &amp;lt;span onclick=&amp;quot;CreateVersion.foo(&#39;plop&#39;)&amp;quot;&amp;gt;plop/span&amp;gt;
            &amp;lt;span onclick=&amp;quot;CreateVersion.foo(&#39;prout&#39;)&amp;quot;&amp;gt;prout&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input
            id=&amp;quot;CreateVersion_name&amp;quot;
            name=&amp;quot;CreateVersion[name]&amp;quot;
            class=&amp;quot;form-control version_name&amp;quot;
            type=&amp;quot;text&amp;quot;
        /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;lt;span&amp;gt;something something&amp;lt;/span&amp;gt;:
            &amp;lt;span class=&amp;quot;text_length&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input
            id=&amp;quot;CreateVersion_articleNotes&amp;quot;
            name=&amp;quot;CreateVersion[articleNotes]&amp;quot;
            class=&amp;quot;form-control&amp;quot;
            type=&amp;quot;text&amp;quot;
        /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;hr/&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;button
            type=&amp;quot;submit&amp;quot;
            id=&amp;quot;CreateVersion_submit&amp;quot;
            name=&amp;quot;CreateVersion[submit]&amp;quot;
        &amp;gt;
            submit
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Le erreur&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;TypeError: CreateVersion.foo is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No, not in IE6, in last version of Firefox/Chrome&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Le solution&lt;/h3&gt;

&lt;p&gt;This line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;form name=&amp;quot;CreateVersion&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;declare a Form with a name &lt;code&gt;CreateVersion&lt;/code&gt; which is exactly the same name as our
Javascript module, and guess what ?&lt;/p&gt;

&lt;p&gt;The name is exported in the DOM, which that when you do that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;Foo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.Foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to access to the DOM node, and in the HTML itself, the &amp;ldquo;document&amp;rdquo; is implicit which
mean that &amp;ldquo;document.Foo&amp;rdquo; collide with any javascript defined variable &amp;ldquo;Foo&amp;rdquo;&lt;/p&gt;

&lt;p&gt;For more explanation see &lt;a href=&#34;http://stackoverflow.com/questions/1415747/javascript-function-and-form-name-conflict&#34;&gt;this stackoverflow question&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;How to avoid that:&lt;/h3&gt;

&lt;p&gt;Some possibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it a coding style policy that module name start contains something &amp;ldquo;javascript only&amp;rdquo; like &lt;code&gt;FooModule&lt;/code&gt; or &lt;code&gt;FooJS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;put your modules in one big wrapping modules (like &lt;code&gt;MyCorp.Foo&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workflow publishing blog post with hugo</title>
      <link>http://allan-simon.github.io/blog/posts/workflow-publishing-blog-post-with-hugo/</link>
      <pubDate>Fri, 20 Feb 2015 15:03:36 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/workflow-publishing-blog-post-with-hugo/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve added some functions in my shell to make it even more convenient
to write/edit/publish articles with &lt;code&gt;hugo&lt;/code&gt; (just a self reminder)&lt;/p&gt;

&lt;p&gt;so that now I have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new_blog_post name-of-your-blog-post&lt;/li&gt;
&lt;li&gt;publish_blog&lt;/li&gt;
&lt;li&gt;edit_last_blog_post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;that can be run from anywhere in my terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export BLOG_ROOT=~/git/perso/blog
export BLOG_THEME=hyde
export GITHUB=git@github.com:allan-simon/blog.git

function new_blog_post {
    cd $BLOG_ROOT
    LAST_BLOG_POST=$(hugo new posts/$1.md | cut -d &amp;quot; &amp;quot; -f 1) ;
    export LAST_BLOG_POST ;
    $EDITOR $LAST_BLOG_POST
    cd -
}

function publish_blog {
    cd $BLOG_ROOT;
    hugo --theme=&amp;quot;$BLOG_THEME&amp;quot; --buildDrafts &amp;amp;&amp;amp; \
    git add -A &amp;amp;&amp;amp;  \
    git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; \
    git push origin master &amp;amp;&amp;amp; \
    git subtree push --prefix=public $GITHUB gh-pages --squash  &amp;amp;&amp;amp; \
    echo &amp;quot;published&amp;quot;
    cd $BLOG_ROOT
}

function edit_last_blog_post {
    $EDITOR $LAST_BLOG_POST
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functionnal tests in symfony2 with authentication</title>
      <link>http://allan-simon.github.io/blog/posts/functionnal-tests-symfony2-and-authentication/</link>
      <pubDate>Fri, 20 Feb 2015 14:28:13 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/functionnal-tests-symfony2-and-authentication/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you have your symfony2 website, all setup correctly with its
set of functionnal tests using phpunit, and now you start to have
pages that only authenticated users can access to. My first solution was to
create a client, make it load the login form, submit some valid credentials
and then load the actual page to test. It was working fine as the client
has a storage for cookie, it is acting like an actual browser in that case.&lt;/p&gt;

&lt;p&gt;The problem was that the time to execute the test was much longer, which
started to become a problem has the test suite was growing.&lt;/p&gt;

&lt;p&gt;The first trick is to follow them method adviced by symfony, which is for the
test environnement to enable the HTTP Basic Authentication method. For those
who doesn&amp;rsquo;t know, the HTTP standard comme with a method to authentify a
user-agent by directly sending the username/password in the HTTP header
(which goes along the fact that HTTP is aimed to be stateless)&lt;/p&gt;

&lt;p&gt;in your &lt;code&gt;config_test.yml&lt;/code&gt; add this (replace &lt;code&gt;NAME_OF_YOUR_FIREWALL&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;security:
    firewalls:
        NAME_OF_YOUR_FIREWALL:
            http_basic: ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second trick, to not have to repeat the username/password in all your
functionnal tests, is to use the &lt;a href=&#34;https://github.com/liip/LiipFunctionalTestBundle&#34;&gt;LiipFunctionnalBundle&lt;/a&gt;
follow the installation instruction and then make your functionnal test inherit
from their class, like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//...
use Liip\FunctionalTestBundle\Test\WebTestCase;

class YourTest extends WebTestCase
{
 // your code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you can precise in &lt;code&gt;config_test.yml&lt;/code&gt; your credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;liip_functional_test:
    authentication:
        username: &amp;quot;XXXXX&amp;quot;
        password: &amp;quot;YYYYY&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finally to create an authenticated client, use this method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//...
use Liip\FunctionalTestBundle\Test\WebTestCase;

class YourTest extends WebTestCase
{
    public testYourFeature()
    {
        // true = &amp;quot;authenticated&amp;quot;
        $client static::makeClient(true);
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Solve composer github api limitation</title>
      <link>http://allan-simon.github.io/blog/posts/solve-composer-github-api-limitation/</link>
      <pubDate>Tue, 10 Feb 2015 18:19:22 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/solve-composer-github-api-limitation/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Could not fetch X enter your GitHub credentials to go over the API rate limit&lt;/h3&gt;

&lt;p&gt;The problem is that composer is retrieving nearly all the packages from github
using the anonymous access github API. In order to solve it you need to generate
a token&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you need a github account (or ask a friend)&lt;/li&gt;
&lt;li&gt;go on your setting page &lt;a href=&#34;https://github.com/settings/applications&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;click on &lt;code&gt;Generate new token&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;now two possibilities&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;1 - Put this token in one specific project&lt;/h4&gt;

&lt;p&gt;for this simply run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer config -g github-oauth.github.com YOUR_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php composer.phar config -g github-oauth.github.com YOUR_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(depending on how you installed composer)&lt;/p&gt;

&lt;p&gt;it will add that to your project&amp;rsquo;s composer.json file&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;2 -  Put this token in your global composer configuration&lt;/h4&gt;

&lt;p&gt;If your project is an open-source or company project you may not want
to commit your token on the git of your project/company&lt;/p&gt;

&lt;p&gt;for this edit the file &lt;code&gt;~/.composer/config.json&lt;/code&gt; and put in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;config&amp;quot;: {
        &amp;quot;github-oauth&amp;quot;: { &amp;quot;github.com&amp;quot;: &amp;quot;YOUR_TOKEN&amp;quot; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that&amp;rsquo;s all folks!&lt;/p&gt;

&lt;p&gt;Source:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/kz4egw/composer-install-github-rate-limiting-work-around&#34;&gt;coderwall.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/composer/composer/issues/3542&#34;&gt;composer&amp;rsquo;s github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/1509-personal-api-tokens&#34;&gt;github&amp;rsquo;s blog&lt;/a&gt; More details about Github token&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install docker on ubuntu 12.04</title>
      <link>http://allan-simon.github.io/blog/posts/install-docker-on-ubuntu-12.04/</link>
      <pubDate>Tue, 10 Feb 2015 14:14:49 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/install-docker-on-ubuntu-12.04/</guid>
      <description>&lt;p&gt;This article is a shameless summary from &lt;a href=&#34;http://compositecode.com/2013/11/11/getting-docker-installed-on-ubuntu-12-04-lts/&#34;&gt;http://compositecode.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updating your kernel to 3.8+ (requires a reboot)&lt;/li&gt;
&lt;li&gt;Add the docker repository&lt;/li&gt;
&lt;li&gt;Installing the package&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
sudo reboot
sudo sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot;
sudo sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
sudo apt-get update
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you should be able to get docker working&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>postgresql display one column per line</title>
      <link>http://allan-simon.github.io/blog/posts/postgresql-display-one-column-per-line/</link>
      <pubDate>Tue, 10 Feb 2015 11:48:21 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/postgresql-display-one-column-per-line/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Problem : displaying a table with a lot of columns&lt;/h3&gt;

&lt;p&gt;You always got that table with a dozens of columns of type text and for which
the normal tabular output does not work nicely and you end up with something
like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; articleid | plop | pouet | prout | tagada |  id   | newsid  | newstype |                                                          title                                                          | something | something | something | something | something | something | something | something |      something       |      something       | something | something | something | something |          something          |    something    |                                                                                                                                                                                                                                                                                                                 something                                                                                                                                                                                                                                                                                                                 |            something            
-----------+-------+-------+-------+-------+-------+---------+----------+-----------------------------------------------------------------------------------------------------------------------------+------------+-------------+-----------+------------+-----------------+---------+--------------+---------+---------------------+---------------------+---------------+-------------+-----------+------------+---------------------------+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+------------+--------------------------------+--------------+----------------------+------------------------------------------------------------------------------------+--------------+-----------+----------+----------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------+-----------+-------+------------
   1000163 |     0 |     0 |     0 |     0 |   141 | 1000147 |       10 | blablabla                                                                                           |          3 |           4 |        22 |    1000163 |               0 | 1000163 |          184 |   10028 | 2014-06-30 23:36:00 | 2014-06-30 23:36:00 |             0 |           0 |         0 |          0 |                           |           |          
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;In MySQL&lt;/h3&gt;

&lt;p&gt;with MySQL you can replace &lt;code&gt;;&lt;/code&gt; by &lt;code&gt;\G&lt;/code&gt; at the end of your SQL statement, i.e turning&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM example ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM example \G
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;In PostgreSQL&lt;/h3&gt;

&lt;p&gt;you need first to use &lt;code&gt;\x&lt;/code&gt; and it will activate the &amp;lsquo;one column by line&amp;rsquo; display
(use &lt;code&gt;\x&lt;/code&gt; again to switch back to normal mode)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\x
SELECT * FROM example;
\x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you will something like that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-[ RECORD 1 ]------
articleid | 1000000
something     | 0
something     | 0
something     | 0
something     | 0
id        | 1
-[ RECORD 2 ]------
articleid | 1000002
something     | 0
something     | 0
something     | 0
something     | 0
something     | 2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A new Blog this time on github and statically generated</title>
      <link>http://allan-simon.github.io/blog/posts/first/</link>
      <pubDate>Mon, 09 Feb 2015 23:24:39 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/first/</guid>
      <description>&lt;p&gt;It has been a long time since I last did a blog the biggest reason behind were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s hard to maintain a server and a blog platform&lt;/li&gt;
&lt;li&gt;most common web plateforms are blocked in China&lt;/li&gt;
&lt;li&gt;the other plateforms does not fit my geeky needs&lt;/li&gt;
&lt;li&gt;non-self hosted platform make it hard to have easy backup of your data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here we are, after reading comments on HackerNews I&amp;rsquo;ve found the project
&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; which permits you to create a static blog the
advantages I see to it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s all command line and simple to install&lt;/li&gt;
&lt;li&gt;vim and markdown friendly, posting is just one more markdown file&lt;/li&gt;
&lt;li&gt;can be hosted on github (which solve the hosting problem)&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s text files and git (which solve the backup problem)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>