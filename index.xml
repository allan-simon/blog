<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Allan&#39;s blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://allan-simon.github.io/blog/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 09 Apr 2015 01:44:41 CST</updated>
    
    <item>
      <title>doctrine2 order by count many to many</title>
      <link>http://allan-simon.github.io/blog/posts/doctrine2-order-by-count-many-to-many/</link>
      <pubDate>Thu, 09 Apr 2015 01:44:41 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/doctrine2-order-by-count-many-to-many/</guid>
      <description>

&lt;p&gt;Today I found a problem quite common but tricky enough for the solution
to share it with you&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;I have 2 Entities&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a &amp;ldquo;likedByUsers&amp;rdquo; Many To Many relationship between both&lt;/p&gt;

&lt;p&gt;Now I would like to get the Articles ordered by number of &amp;lsquo;likes&amp;rsquo;
for an API call returning a list of Articles&lt;/p&gt;

&lt;p&gt;if you feel smart you can try to find the solution by yourself
it&amp;rsquo;s an interesting exercise about &amp;lsquo;how much do you know doctrine and SQL&amp;rsquo;&lt;/p&gt;

&lt;p&gt;but let me tell you, the solution is like an Egg of Columbus, once you see
it it becomes evident, but it was actually not that simple at first.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;The solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// in your repository
$builder = $this-&amp;gt;createQueryBuilder(&#39;a&#39;);
    -&amp;gt;select(&#39;COUNT(u) AS HIDDEN nbrLikes&#39;, &#39;a&#39;)
    -&amp;gt;leftJoin(&#39;a.likedByUsers&#39;, &#39;u&#39;) 
    -&amp;gt;orderBy(&#39;nbrLikes&#39;, &#39;DESC&#39;)
    -&amp;gt;groupBy(&#39;a&#39;)
    -&amp;gt;getQuery()
    -&amp;gt;getResult()
;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Step by step&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt;leftJoin(&#39;a.likedByUsers&#39;, &#39;u&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as it&amp;rsquo;s a many to many relationship, and as doctrine lazy-load by default
we need to explicitly tell him we will need the join, and the referenced
entity (users) will be refered as &lt;code&gt;u&lt;/code&gt; in the other part of the query&lt;/p&gt;

&lt;p&gt;now the interesting point here is the &lt;code&gt;leftJoin&lt;/code&gt;, most PHP developers
are not familiar with the different type of Join&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inner join&lt;/code&gt; would have taken only the articles and users who have &lt;strong&gt;At least&lt;/strong&gt; one relationship
which mean that using this, you will not get back the articles with 0 likes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left join&lt;/code&gt; take ALL the row on the left side (so here articles) and the entity on the right will
be null if there&amp;rsquo;s no relationship, so here that&amp;rsquo;s what we want, as then the &lt;code&gt;COUNT()&lt;/code&gt; will consider norelationship as &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    -&amp;gt;groupBy(&#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;here it&amp;rsquo;s really important to group by the FULL entity and not just &lt;code&gt;a.id&lt;/code&gt;, otherwise SQL
will complain that your other fields are not inside the GROUP BY (here nothing specific as doctrine,
it&amp;rsquo;s pure SQL, just that Doctrine makes your life easier by permitting you not to precise
every single field one by one&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -&amp;gt;select(&#39;COUNT(u) AS HIDDEN nbrLikes&#39;, &#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have the actual interesting part
we select a &lt;code&gt;COUNT&lt;/code&gt; in order to be able to use it in the &lt;code&gt;ORDER BY&lt;/code&gt; and also the
entity article itself, however if we were just doing &lt;code&gt;&#39;COUNT(u) AS nbrLikes&#39; , a&lt;/code&gt;
then for each result, we would not directly the entity, but an array of two values
the count and then the entity (which would need additional treatment in my case
as I&amp;rsquo;m just returning an array of Article to be serialized by the REST bundle).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why we have &lt;code&gt;HIDDEN&lt;/code&gt;, it will tell doctrine to use it for the generated query
but not to use when creating the result array, so that it returns only the entity&lt;/p&gt;

&lt;p&gt;For those wondering if I only get the entity how to have my API call returning also
a &lt;code&gt;number_of_likes&lt;/code&gt; in the JSON, I will later make an article about virtual property
of the JSM Serializer&lt;/p&gt;

&lt;p&gt;Hope you learn something in the process,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gitlab ci with docker runner</title>
      <link>http://allan-simon.github.io/blog/posts/gitlab-ci-with-docker-runner/</link>
      <pubDate>Sun, 29 Mar 2015 15:05:36 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/gitlab-ci-with-docker-runner/</guid>
      <description>

&lt;p&gt;In my company we&amp;rsquo;re using &lt;a href=&#34;https://gitlab.com&#34;&gt;Gitlab&lt;/a&gt; for managing our code
and doing code review. For the last months we&amp;rsquo;ve been standardizing our stack
on Symfony/Postgresql/php-fpm. Recently we&amp;rsquo;ve started automatizing our tests
using phpunit. The next step was of course to have a start of continuous
integration and to be able to run our tests at each Merge request.&lt;/p&gt;

&lt;p&gt;In this article we&amp;rsquo;re going to view&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to install gitlab-ci on a separate server than your gitlab instance&lt;/li&gt;
&lt;li&gt;How to put gitlab-ci behind your company frontal server&lt;/li&gt;
&lt;li&gt;How to make gitlab-ci run your tests in a Docker container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Gitlab-CI in a separate instance&lt;/h2&gt;

&lt;p&gt;To do continous-integration you got plenty of choice, the most popular one being
&lt;a href=&#34;http://jenkins-ci.org&#34;&gt;jenkinks&lt;/a&gt;. However it seems to be that it is a bit bloated
and has too much feature that we don&amp;rsquo;t need for the moment.&lt;/p&gt;

&lt;p&gt;On the other side gitlab comes with its own CI system (named Gitlab-ci) that has
the advantage to be damn simple for the moment and of course pretty much integrated
to gitlab (no need to create new accounts, build status directly in gitlab etc.)&lt;/p&gt;

&lt;p&gt;In order to install it you can use the &lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;ommibus package&lt;/a&gt;
which will take care of installing everything from you&lt;/p&gt;

&lt;p&gt;Then in order to have only gitlab-ci you can can follow the step &lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/gitlab-ci/README.md&#34;&gt;Running Gitlab on its own server&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Gitlab-CI behind your company&amp;rsquo;s frontal server&lt;/h2&gt;

&lt;p&gt;Our company as one public IP under which we host all our services.
We have then a frontal apache2 (but it could have been a nginx) which proxify
then the request depending of the hostname. In that case it does not make
sense for us to still have the Nginx that is installed with the omnibus package&lt;/p&gt;

&lt;p&gt;So in order to deactivate it, in your &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt; in the Nginx section
you can add&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx[&#39;enable&#39;] = false
ci_nginx[&#39;enable&#39;] = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gitlab-ctl reconfigure 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then in your frontal you can put a vhost&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost  *:80&amp;gt;
    ServerName gitlab-ci.example.com

    ProxyRequests off
    ProxyPreserveHost on
    ProxyPass / http://LAN_IP_OF_YOUR_GITLAB_CI:8181/
    ProxyPassReverse / http://LAN_IP_OF_YOUR_GITLAB_CI:8181/
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(by default gitlab-ci&amp;rsquo;s unicorn listen on port 8181)&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Tell Gitlab-ci to run your test into a docker container&lt;/h2&gt;

&lt;p&gt;Gitlab-ci use what they call a &amp;ldquo;Runner&amp;rdquo; to run your test, it&amp;rsquo;s more
or less a spare machine in which Gitlab-ci will clone your project
and run a bash script you&amp;rsquo;ve provided in the Gitlab-ci admin panel&lt;/p&gt;

&lt;p&gt;The goal of this article is not to do a deep introduction to &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;
but basically it&amp;rsquo;s a powerful technology that permits you to run &amp;ldquo;containers&amp;rdquo;.
You can consider a container as a virtual machine without the virtual part, and restricted
to Linux. (more or less)&lt;/p&gt;

&lt;p&gt;The container will brings their full advatanges with gitlab-ci as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they don&amp;rsquo;t take extra memory when not being runned&lt;/li&gt;
&lt;li&gt;you can create a new container from a base image in a blink of eyes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately for us a Docker image already exists with all the base
things to have a Gitlab-ci Runner in a container. &lt;a href=&#34;https://github.com/sameersbn/docker-gitlab-ci-runner&#34;&gt;The repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have already docker installed you can pull the image doing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull sameersbn/gitlab-ci-runner:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you need to register your runner to gitlab-ci you can do that with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /opt/your-project-runner
docker run --name your-project-runner -it --rm \
    -v /opt/your-project-runner:/home/gitlab_ci_runner/data \
  sameersbn/gitlab-ci-runner:latest app:setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will ask you some information given to you by your instance of gitlab-ci&lt;/p&gt;

&lt;p&gt;you can then pop a runner by doing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name your-project-runner -it -d \
    -v /opt/your-project-runner:/home/gitlab_ci_runner/data \
  sameersbn/gitlab-ci-runner:latest app:setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will certainly to customize some stuff on your container
you can do so by connecting as root to it using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec -it your-project-runner bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;of course something to keep in mind is that container are meant to be stateless
which mean that outside of the directories you map with &lt;code&gt;-v&lt;/code&gt; option
the other information will be deleted when you restart the container&lt;/p&gt;

&lt;p&gt;So if you need to always create the same kind of container, you can create
your own Runner container by extending this one to fit your needs, like
it has been done in the &lt;a href=&#34;https://github.com/sameersbn/docker-runner-gitlab&#34;&gt;docker image to run test for gitlab&amp;rsquo;s own source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a next article we will see in details how to create step by step your own
Gitlab-ci for your php/symfony project&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>symfony create your own third party bundle part 1/4</title>
      <link>http://allan-simon.github.io/blog/posts/symfony-create-your-own-third-party-bundle/</link>
      <pubDate>Sat, 28 Mar 2015 21:05:04 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/symfony-create-your-own-third-party-bundle/</guid>
      <description>

&lt;p&gt;So you&amp;rsquo;ve reached the point where you&amp;rsquo;re reusing the same service accross
symfony application, again and again and you feel like this could even
be useful for other people. You decide that it will be great if you could
do like adults and have your own bundle.&lt;/p&gt;

&lt;p&gt;Here is how to create one from scratch, you can find the repo here &lt;a href=&#34;https://travis-ci.org/we-bridge/OAuth2AccessBundle&#34;&gt;Oauth2AccessBundle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we cover these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating the base repo in github and composer.json&lt;/li&gt;
&lt;li&gt;Adding the base Classes&lt;/li&gt;
&lt;li&gt;Permit users of your bundle to configure it&lt;/li&gt;
&lt;li&gt;Make your bundle testable&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Create the base repo and composer.json&lt;/h3&gt;

&lt;p&gt;Well for creating the base repo, nothing different from any new repo on github.
I would however stressed out that you should chose since the beginning a license&lt;/p&gt;

&lt;p&gt;I would recommend either&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The MIT license, the one I personnaly chose, it permits your bundle to be
used without overthinking even by Companies with lawyer&lt;/li&gt;
&lt;li&gt;The AGPL license, no the A is not a typo, like the GPL license it does
oblige people which integrate your bundle into application to make the full
application also in a GPL-compatible license and to redistribute the modified
source code with the application itself. HOWEVER, at the difference of the GPL
it cover also the case of websites/webservices/REST API (for the GPL, it only
works if the company which has made modification sells the website itself
to other customers)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can of course chose the license your want, but be sure of what they implies.
(As said for example the GPL will not force people who use and modify your
bundle in their own website to give you back patches etc.)&lt;/p&gt;

&lt;p&gt;Then add a &lt;code&gt;composer.json&lt;/code&gt; file with that skeleton content&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot; : &amp;quot;webridge/oauth2-access-bundle&amp;quot;,
    &amp;quot;type&amp;quot; : &amp;quot;symfony-bundle&amp;quot;,
    &amp;quot;description&amp;quot; : &amp;quot;Symfony Oauth2 consumer bundle&amp;quot;,
    &amp;quot;keywords&amp;quot; : [&amp;quot;Symfony&amp;quot;, &amp;quot;Oauth2&amp;quot;],
    &amp;quot;homepage&amp;quot; : &amp;quot;https://github.com/we-bridge/OAuth2AccessBundle&amp;quot;,
    &amp;quot;license&amp;quot; : &amp;quot;MIT&amp;quot;,
    &amp;quot;authors&amp;quot; :
    [
        {
            &amp;quot;name&amp;quot; : &amp;quot;Allan SIMON&amp;quot;,
            &amp;quot;email&amp;quot; : &amp;quot;allan.simon@supinfo.com&amp;quot;,
            &amp;quot;homepage&amp;quot; : &amp;quot;http://allan-simon.github.io/blog&amp;quot;,
            &amp;quot;role&amp;quot; : &amp;quot;Developer&amp;quot;
        }
    ],
    &amp;quot;minimum-stability&amp;quot; : &amp;quot;beta&amp;quot;,
    &amp;quot;require&amp;quot;: {
        &amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.3.2&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-0&amp;quot;: { &amp;quot;Webridge\\Oauth2AccessBundle&amp;quot;: &amp;quot;&amp;quot; }
    },
    &amp;quot;target-dir&amp;quot; : &amp;quot;Webridge/Oauth2AccessBundle&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; part is totally up to you but it needs to be unique accross
composer packages so most of the time &lt;code&gt;your-name-or-company/your-bundle-name&lt;/code&gt;
is safe.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;autload&lt;/code&gt; part precise in which namespace your bundle classes will be
accessed&lt;/p&gt;

&lt;p&gt;Now that we have the very base of our repository, we will see in next
post how to create a very basic service without configuration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>migrate down with doctrine migrations</title>
      <link>http://allan-simon.github.io/blog/posts/migrate-down-with-doctrine-migrations/</link>
      <pubDate>Sat, 14 Mar 2015 18:21:01 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/migrate-down-with-doctrine-migrations/</guid>
      <description>&lt;p&gt;if you&amp;rsquo;re using Doctrine in your Symfony2 project, you&amp;rsquo;re certainly using the
excellent &lt;a href=&#34;http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html&#34;&gt;Doctrine Migration Bundle&lt;/a&gt;
but you may have seen that documentation is not staging clearly how to migrate down&lt;/p&gt;

&lt;p&gt;for that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php app/console doctrine:migrations:status

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;take the number in &amp;ldquo;Current Version&amp;rdquo; (format YYYYMMDDHHMMSS)&lt;/p&gt;

&lt;p&gt;and then run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php app/console doctrine:migrations:execute YYYYMMDDHHMMSS --down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that&amp;rsquo;s all folks !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>symfony 2.6 tips #1</title>
      <link>http://allan-simon.github.io/blog/posts/symfony-2.6-tips-1/</link>
      <pubDate>Wed, 11 Mar 2015 22:40:50 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/symfony-2.6-tips-1/</guid>
      <description>

&lt;p&gt;Here a list of tips for symfony 2.6 I&amp;rsquo;ve gathered these days&lt;/p&gt;

&lt;p&gt;###Skip test in phpunit&lt;/p&gt;

&lt;p&gt;Imagine you&amp;rsquo;re rewriting your application to split &amp;lsquo;big&amp;rsquo; pages into
set of smaller actions. You got your test already written but they
are going to fail the time you finish the rewrite, and because you&amp;rsquo;re
in company with tight deadline, you don&amp;rsquo;t have time to adapt the tests
&amp;ldquo;right here right now&amp;rdquo; several possibilities&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leave the tests failing until you fix them &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Delete the test.&lt;/li&gt;
&lt;li&gt;Put between comments the failing tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these solutions are suboptimals, instead you can add this line at the beginning of your test method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function testMyTestWhichYouWantToSkip()
{
    $this-&amp;gt;markTestSkipped(&amp;quot;message explaining why it&#39;s skipped&amp;quot;);
    // your test code, unmodified
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so that it will appear with a &lt;code&gt;S&lt;/code&gt; in the test report, so that you have a reminder that there&amp;rsquo;s something to fix.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Disable form validation in test&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re writing functionnal test and you need to check the case of an form submitted with bogus data (to be sure your server side code is protected against hand-crafted request). By default the form you get in functionnal test will have the same checking rules than the one on server side, so in order to disable checking you can do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$form[&#39;country&#39;]-&amp;gt;disableValidation()-&amp;gt;select(&#39;Invalid value&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;(Doctrine) don&amp;rsquo;t use findById() when you just mean find()&lt;/h3&gt;

&lt;p&gt;well, the title is self-explaining&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redmine-cli and redmine API</title>
      <link>http://allan-simon.github.io/blog/posts/redmine-cli/</link>
      <pubDate>Wed, 25 Feb 2015 00:08:11 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/redmine-cli/</guid>
      <description>

&lt;p&gt;I found a tool to manage redmine from the cli, in python:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install redmine-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then a config file &lt;code&gt;~/.redmine-cli&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
key=API_KEY_YOU_CAN_SEE_IN_YOUR_ACCOUNT_ON_REDMINE
my_id=ID_YOU_CAN_ON_YOUR_PROFILE_PAGE
root_url=HOME_PAGE_OF_REDMINE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you can do&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;redmine open 123&lt;/code&gt; to open the issue 123 in your browser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redmine issues&lt;/code&gt; to see your issues&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redmine issue 123&lt;/code&gt; to see information about issue 123&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(it has more options I let you check the doc)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yanjost/redmine-cli&#34;&gt;original repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/allan-simon/redmine-cli&#34;&gt;my fork where I have some features (like updating a ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(hopefully my modification are in PR on the original repo and will be soon integrated)
my modification include so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redmine issue 123 long&lt;/code&gt; to see more detailled information about the issue&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redmine update 123 &#39;in progress&#39;&lt;/code&gt; to update the status to &lt;code&gt;in progress&lt;/code&gt; (admitting your redmine has this status)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;The long story behind:&lt;/h3&gt;

&lt;p&gt;As any good Linux user, I love the CLI (no, there&amp;rsquo;s no such thing
as a &lt;strong&gt;good&lt;/strong&gt; Linux user who does not love the CLI). Starting from
that, though I appreciate using Redmine to manage features to implement,
bugs etc. I&amp;rsquo;m not really fan of needing to click here and there,
especially when the only things I want is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;know what a Merge request on gitlab referencing the ticket XXX is about&lt;/li&gt;
&lt;li&gt;see what tickets are assigned to me&lt;/li&gt;
&lt;li&gt;update a ticket status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It becomes even less practical when you want to update a list of ticket
you can either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;select in the list, while keeping shift pressed, the list of ticket you want to update&lt;/li&gt;
&lt;li&gt;right click,&lt;/li&gt;
&lt;li&gt;update the status&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem of that technique is that, if you click a little too much on the right,
on the left etc. you loose your selection, which can be very frustating
Then you have the second technique&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;click on ticket N&lt;/li&gt;
&lt;li&gt;click on update&lt;/li&gt;
&lt;li&gt;update, click on submit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;each of these steps impliying a page load, no need to tell you how much times
it takes even for 5 tickets&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;The CLI will always be there for you: redmine-cli&lt;/h3&gt;

&lt;p&gt;For now some month, whenever I&amp;rsquo;m looking for that little tool, the reflex is to
search for it on github. As I knew there was a Redmine API and that we don&amp;rsquo;t have
time for a NIH (Not Invented Here) syndrom, it was very likely such a CLI tool
would already exist.&lt;/p&gt;

&lt;p&gt;I found a several tool, &lt;a href=&#34;https://github.com/diasjorge/redmine-cli&#34;&gt;one in ruby&lt;/a&gt;
which seems rather complete, but as it was not updated for 2 years, and I didn&amp;rsquo;t felt
like installing ruby on my computer (I guess it&amp;rsquo;s already install but&amp;hellip;) and it was
late, so losing 2 minutes to know how to install the project was too much&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ALWAYS PUT CLEAR INSTRUCTION , DUMB PROOF, ON HOW TO INSTALL YOUR TOOL&lt;/li&gt;
&lt;li&gt;if a project is &amp;ldquo;complete&amp;rdquo; and its the reason why you&amp;rsquo;re not updating it, state it
so that people know if the project is dead or just &amp;lsquo;in good shape enough but the author is still active&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I found the python project, which was updated in 2014 and
had clear installation instruction &lt;code&gt;pip install redmine-cli&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Missing feature: redmine API my love&lt;/h3&gt;

&lt;p&gt;while implementing the feature I found that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the API call was returning a 200 (without nothing in the body)&lt;/li&gt;
&lt;li&gt;BUT the status was not updated (though the ticket was showing activity &amp;lsquo;less than a minute ago&amp;rsquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;after some research I found &lt;a href=&#34;http://www.redmine.org/boards/2/topics/25920&#34;&gt;that redmine discussion&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I need to declare the header &lt;code&gt;Application/Json&lt;/code&gt; (normal)&lt;/li&gt;
&lt;li&gt;It needs to have the &lt;code&gt;status_id&lt;/code&gt; value as a string (and I was giving an integer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second point is raging because GUESS WHAT, that integer was given to me BY REDMINE ITSELF !
So please please when you do an API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be consistent, if &lt;code&gt;status_id&lt;/code&gt; is an integer once, it must always be a integer&lt;/li&gt;
&lt;li&gt;Have a clear documentation, with example&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Form name goes into global scope in javascript</title>
      <link>http://allan-simon.github.io/blog/posts/form-name-goes-into-global-scope-javascript/</link>
      <pubDate>Mon, 23 Feb 2015 17:11:21 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/form-name-goes-into-global-scope-javascript/</guid>
      <description>

&lt;p&gt;An interesting problem a friend of mine discovered today&lt;/p&gt;

&lt;p&gt;Can you spot the problem?&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Le javascript&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var CreateVersion = (function(){
    &#39;use strict&#39;;

    var foo = function(text) {
        console.log(text);
    };

    return {
        foo : foo 
    };
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Le HTML&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;CreateVersion&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;lt;span&amp;gt;something&amp;lt;/span&amp;gt;
            &amp;lt;!--
                onClick on a span is a bad pratice and will be
                the object of an other post
            --&amp;gt;
            &amp;lt;span onclick=&amp;quot;CreateVersion.foo(&#39;plop&#39;)&amp;quot;&amp;gt;plop/span&amp;gt;
            &amp;lt;span onclick=&amp;quot;CreateVersion.foo(&#39;prout&#39;)&amp;quot;&amp;gt;prout&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input
            id=&amp;quot;CreateVersion_name&amp;quot;
            name=&amp;quot;CreateVersion[name]&amp;quot;
            class=&amp;quot;form-control version_name&amp;quot;
            type=&amp;quot;text&amp;quot;
        /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
            &amp;lt;span&amp;gt;something something&amp;lt;/span&amp;gt;:
            &amp;lt;span class=&amp;quot;text_length&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input
            id=&amp;quot;CreateVersion_articleNotes&amp;quot;
            name=&amp;quot;CreateVersion[articleNotes]&amp;quot;
            class=&amp;quot;form-control&amp;quot;
            type=&amp;quot;text&amp;quot;
        /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;hr/&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;button
            type=&amp;quot;submit&amp;quot;
            id=&amp;quot;CreateVersion_submit&amp;quot;
            name=&amp;quot;CreateVersion[submit]&amp;quot;
        &amp;gt;
            submit
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Le erreur&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;TypeError: CreateVersion.foo is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No, not in IE6, in last version of Firefox/Chrome&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Le solution&lt;/h3&gt;

&lt;p&gt;This line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;form name=&amp;quot;CreateVersion&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;declare a Form with a name &lt;code&gt;CreateVersion&lt;/code&gt; which is exactly the same name as our
Javascript module, and guess what ?&lt;/p&gt;

&lt;p&gt;The name is exported in the DOM, which that when you do that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;Foo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.Foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to access to the DOM node, and in the HTML itself, the &amp;ldquo;document&amp;rdquo; is implicit which
mean that &amp;ldquo;document.Foo&amp;rdquo; collide with any javascript defined variable &amp;ldquo;Foo&amp;rdquo;&lt;/p&gt;

&lt;p&gt;For more explanation see &lt;a href=&#34;http://stackoverflow.com/questions/1415747/javascript-function-and-form-name-conflict&#34;&gt;this stackoverflow question&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;How to avoid that:&lt;/h3&gt;

&lt;p&gt;Some possibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it a coding style policy that module name start contains something &amp;ldquo;javascript only&amp;rdquo; like &lt;code&gt;FooModule&lt;/code&gt; or &lt;code&gt;FooJS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;put your modules in one big wrapping modules (like &lt;code&gt;MyCorp.Foo&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workflow publishing blog post with hugo</title>
      <link>http://allan-simon.github.io/blog/posts/workflow-publishing-blog-post-with-hugo/</link>
      <pubDate>Fri, 20 Feb 2015 15:03:36 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/workflow-publishing-blog-post-with-hugo/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve added some functions in my shell to make it even more convenient
to write/edit/publish articles with &lt;code&gt;hugo&lt;/code&gt; (just a self reminder)&lt;/p&gt;

&lt;p&gt;so that now I have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;new_blog_post name-of-your-blog-post&lt;/li&gt;
&lt;li&gt;publish_blog&lt;/li&gt;
&lt;li&gt;edit_last_blog_post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;that can be run from anywhere in my terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export BLOG_ROOT=~/git/perso/blog
export BLOG_THEME=hyde
export GITHUB=git@github.com:allan-simon/blog.git

function new_blog_post {
    cd $BLOG_ROOT
    LAST_BLOG_POST=$(hugo new posts/$1.md | cut -d &amp;quot; &amp;quot; -f 1) ;
    export LAST_BLOG_POST ;
    $EDITOR $LAST_BLOG_POST
    cd -
}

function publish_blog {
    cd $BLOG_ROOT;
    hugo --theme=&amp;quot;$BLOG_THEME&amp;quot; --buildDrafts &amp;amp;&amp;amp; \
    git add -A &amp;amp;&amp;amp;  \
    git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; \
    git push origin master &amp;amp;&amp;amp; \
    git subtree push --prefix=public $GITHUB gh-pages --squash  &amp;amp;&amp;amp; \
    echo &amp;quot;published&amp;quot;
    cd $BLOG_ROOT
}

function edit_last_blog_post {
    $EDITOR $LAST_BLOG_POST
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functionnal tests in symfony2 with authentication</title>
      <link>http://allan-simon.github.io/blog/posts/functionnal-tests-symfony2-and-authentication/</link>
      <pubDate>Fri, 20 Feb 2015 14:28:13 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/functionnal-tests-symfony2-and-authentication/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you have your symfony2 website, all setup correctly with its
set of functionnal tests using phpunit, and now you start to have
pages that only authenticated users can access to. My first solution was to
create a client, make it load the login form, submit some valid credentials
and then load the actual page to test. It was working fine as the client
has a storage for cookie, it is acting like an actual browser in that case.&lt;/p&gt;

&lt;p&gt;The problem was that the time to execute the test was much longer, which
started to become a problem has the test suite was growing.&lt;/p&gt;

&lt;p&gt;The first trick is to follow them method adviced by symfony, which is for the
test environnement to enable the HTTP Basic Authentication method. For those
who doesn&amp;rsquo;t know, the HTTP standard comme with a method to authentify a
user-agent by directly sending the username/password in the HTTP header
(which goes along the fact that HTTP is aimed to be stateless)&lt;/p&gt;

&lt;p&gt;in your &lt;code&gt;config_test.yml&lt;/code&gt; add this (replace &lt;code&gt;NAME_OF_YOUR_FIREWALL&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;security:
    firewalls:
        NAME_OF_YOUR_FIREWALL:
            http_basic: ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second trick, to not have to repeat the username/password in all your
functionnal tests, is to use the &lt;a href=&#34;https://github.com/liip/LiipFunctionalTestBundle&#34;&gt;LiipFunctionnalBundle&lt;/a&gt;
follow the installation instruction and then make your functionnal test inherit
from their class, like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//...
use Liip\FunctionalTestBundle\Test\WebTestCase;

class YourTest extends WebTestCase
{
 // your code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you can precise in &lt;code&gt;config_test.yml&lt;/code&gt; your credentials:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;liip_functional_test:
    authentication:
        username: &amp;quot;XXXXX&amp;quot;
        password: &amp;quot;YYYYY&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finally to create an authenticated client, use this method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//...
use Liip\FunctionalTestBundle\Test\WebTestCase;

class YourTest extends WebTestCase
{
    public testYourFeature()
    {
        // true = &amp;quot;authenticated&amp;quot;
        $client static::makeClient(true);
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Solve composer github api limitation</title>
      <link>http://allan-simon.github.io/blog/posts/solve-composer-github-api-limitation/</link>
      <pubDate>Tue, 10 Feb 2015 18:19:22 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/solve-composer-github-api-limitation/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Could not fetch X enter your GitHub credentials to go over the API rate limit&lt;/h3&gt;

&lt;p&gt;The problem is that composer is retrieving nearly all the packages from github
using the anonymous access github API. In order to solve it you need to generate
a token&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you need a github account (or ask a friend)&lt;/li&gt;
&lt;li&gt;go on your setting page &lt;a href=&#34;https://github.com/settings/applications&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;click on &lt;code&gt;Generate new token&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;now two possibilities&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;1 - Put this token in one specific project&lt;/h4&gt;

&lt;p&gt;for this simply run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer config -g github-oauth.github.com YOUR_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php composer.phar config -g github-oauth.github.com YOUR_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(depending on how you installed composer)&lt;/p&gt;

&lt;p&gt;it will add that to your project&amp;rsquo;s composer.json file&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;2 -  Put this token in your global composer configuration&lt;/h4&gt;

&lt;p&gt;If your project is an open-source or company project you may not want
to commit your token on the git of your project/company&lt;/p&gt;

&lt;p&gt;for this edit the file &lt;code&gt;~/.composer/config.json&lt;/code&gt; and put in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;config&amp;quot;: {
        &amp;quot;github-oauth&amp;quot;: { &amp;quot;github.com&amp;quot;: &amp;quot;YOUR_TOKEN&amp;quot; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that&amp;rsquo;s all folks!&lt;/p&gt;

&lt;p&gt;Source:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/kz4egw/composer-install-github-rate-limiting-work-around&#34;&gt;coderwall.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/composer/composer/issues/3542&#34;&gt;composer&amp;rsquo;s github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/1509-personal-api-tokens&#34;&gt;github&amp;rsquo;s blog&lt;/a&gt; More details about Github token&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install docker on ubuntu 12.04</title>
      <link>http://allan-simon.github.io/blog/posts/install-docker-on-ubuntu-12.04/</link>
      <pubDate>Tue, 10 Feb 2015 14:14:49 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/install-docker-on-ubuntu-12.04/</guid>
      <description>&lt;p&gt;This article is a shameless summary from &lt;a href=&#34;http://compositecode.com/2013/11/11/getting-docker-installed-on-ubuntu-12-04-lts/&#34;&gt;http://compositecode.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updating your kernel to 3.8+ (requires a reboot)&lt;/li&gt;
&lt;li&gt;Add the docker repository&lt;/li&gt;
&lt;li&gt;Installing the package&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
sudo reboot
sudo sh -c &amp;quot;wget -qO- https://get.docker.io/gpg | apt-key add -&amp;quot;
sudo sh -c &amp;quot;echo deb http://get.docker.io/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&amp;quot;
sudo apt-get update
sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you should be able to get docker working&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>postgresql display one column per line</title>
      <link>http://allan-simon.github.io/blog/posts/postgresql-display-one-column-per-line/</link>
      <pubDate>Tue, 10 Feb 2015 11:48:21 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/postgresql-display-one-column-per-line/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;Problem : displaying a table with a lot of columns&lt;/h3&gt;

&lt;p&gt;You always got that table with a dozens of columns of type text and for which
the normal tabular output does not work nicely and you end up with something
like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; articleid | plop | pouet | prout | tagada |  id   | newsid  | newstype |                                                          title                                                          | something | something | something | something | something | something | something | something |      something       |      something       | something | something | something | something |          something          |    something    |                                                                                                                                                                                                                                                                                                                 something                                                                                                                                                                                                                                                                                                                 |            something            

   1000163 |     0 |     0 |     0 |     0 |   141 | 1000147 |       10 | blablabla                                                                                           |          3 |           4 |        22 |    1000163 |               0 | 1000163 |          184 |   10028 | 2014-06-30 23:36:00 | 2014-06-30 23:36:00 |             0 |           0 |         0 |          0 |                           |           |          
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;In MySQL&lt;/h3&gt;

&lt;p&gt;with MySQL you can replace &lt;code&gt;;&lt;/code&gt; by &lt;code&gt;\G&lt;/code&gt; at the end of your SQL statement, i.e turning&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM example ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM example \G
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;In PostgreSQL&lt;/h3&gt;

&lt;p&gt;you need first to use &lt;code&gt;\x&lt;/code&gt; and it will activate the &amp;lsquo;one column by line&amp;rsquo; display
(use &lt;code&gt;\x&lt;/code&gt; again to switch back to normal mode)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\x
SELECT * FROM example;
\x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you will something like that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-[ RECORD 1 ]------
articleid | 1000000
something     | 0
something     | 0
something     | 0
something     | 0
id        | 1
-[ RECORD 2 ]------
articleid | 1000002
something     | 0
something     | 0
something     | 0
something     | 0
something     | 2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A new Blog this time on github and statically generated</title>
      <link>http://allan-simon.github.io/blog/posts/first/</link>
      <pubDate>Mon, 09 Feb 2015 23:24:39 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/posts/first/</guid>
      <description>&lt;p&gt;It has been a long time since I last did a blog the biggest reason behind were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s hard to maintain a server and a blog platform&lt;/li&gt;
&lt;li&gt;most common web plateforms are blocked in China&lt;/li&gt;
&lt;li&gt;the other plateforms does not fit my geeky needs&lt;/li&gt;
&lt;li&gt;non-self hosted platform make it hard to have easy backup of your data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here we are, after reading comments on HackerNews I&amp;rsquo;ve found the project
&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; which permits you to create a static blog the
advantages I see to it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s all command line and simple to install&lt;/li&gt;
&lt;li&gt;vim and markdown friendly, posting is just one more markdown file&lt;/li&gt;
&lt;li&gt;can be hosted on github (which solve the hosting problem)&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s text files and git (which solve the backup problem)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://allan-simon.github.io/blog/about/</link>
      <pubDate>Mon, 09 Feb 2015 23:20:55 CST</pubDate>
      
      <guid>http://allan-simon.github.io/blog/about/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;What will you find on this blog&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;My daily discoveries and tips, mostly web/linux/devops/c++/c/rust related.&lt;/li&gt;
&lt;li&gt;Some tips and tricks on how to survive in the Chinese internet as a devops&lt;/li&gt;
&lt;li&gt;Some news concerning my personnal projects&lt;/li&gt;
&lt;li&gt;Random thoughts as I progress in my professional and personnal career.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>